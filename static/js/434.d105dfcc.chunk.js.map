{"version":3,"file":"static/js/434.d105dfcc.chunk.js","mappings":"iRAEaA,GAAcC,E,QAAAA,IAAH,wR,2BCgGxB,MAxFA,WAEE,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAmEC,EAAAA,EAAAA,MAA5DC,EAAP,EAAOA,mBAAoBC,EAA3B,EAA2BA,WAAYC,EAAvC,EAAuCA,QACvC,GADA,EAAgDC,iBACHC,EAAAA,EAAAA,GAAYT,IAAzD,eAAOU,EAAP,YACA,GADA,EAAoBC,KAApB,EAA0BC,QAA1B,EAAmCC,OACKC,EAAAA,EAAAA,UAAS,KAAjD,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACLV,GACDL,EAAS,gBAEV,CAACK,EAASL,IAEb,IAAMgB,EAAQ,mCAAG,WAAOC,GAAP,2FACQT,EAAW,CAChCU,UAAY,CAACC,SAAUF,EAAOE,SAAUC,SAAUH,EAAOG,YAF5C,OACTC,EADS,OAKf,UAAIA,EAASZ,YAAb,OAAI,EAAeD,WAAWc,SAC5BC,EAAAA,EAAAA,SAAoBF,EAASZ,KAAKD,WAAWgB,aAC7CrB,GAAmB,GACnBC,GAAW,GACXJ,EAAS,eAET,UAAIqB,EAASZ,YAAb,OAAI,EAAeD,WAAWiB,SAASX,EAAgBO,EAASZ,KAAKD,WAAWiB,SAXnE,2CAAH,sDAcd,OACE,+BACA,UAAC,IAAD,CACEC,KAAK,QACLC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,cAAe,CAAEC,UAAU,GAC3Bf,SAAUA,EACVgB,aAAa,MACbC,MAAO,CACLC,OAAQ,MACRC,MAAO,MACPC,SAAU,WACVC,IAAK,MACLC,KAAM,OAZV,WAeE,SAAC,SAAD,CAAWZ,KAAK,OAAhB,UACE,gBACEa,IAAI,8EACJC,IAAI,OACJC,UAAU,aACVR,MAAO,CAAEE,MAAO,MAAOC,SAAU,WAAYE,KAAM,WAGtDzB,IAAgB,cAAGoB,MAAO,CAACS,MAAM,MAAOC,UAAW,SAAUC,SAAS,QAAtD,SAAgE/B,KACjF,SAAC,SAAD,CACEgC,MAAM,WACNnB,KAAK,WACLoB,MAAO,CAAC,CAAEC,UAAU,EAAMtB,QAAS,mEAHrC,UAKE,SAAC,IAAD,OAGF,SAAC,SAAD,CACEoB,MAAM,WACNnB,KAAK,WACLoB,MAAO,CAAC,CAAEC,UAAU,EAAMtB,QAAS,mEAHrC,UAKE,SAAC,aAAD,OAGF,SAAC,SAAD,CACEC,KAAK,WACLsB,cAAc,UACdnB,WAAY,CAAEoB,OAAQ,EAAGrB,KAAM,IAHjC,UAKE,SAAC,IAAD,6BAGF,SAAC,SAAD,CAAWC,WAAY,CAAEoB,OAAQ,EAAGrB,KAAM,IAA1C,UACE,SAAC,IAAD,CAAQsB,KAAK,UAAUC,SAAS,SAAhC","sources":["graphql/mutations/loginAdmin.graphql.ts","components/core/AdminLoginForm.tsx"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const LOGIN_ADMIN = gql`\r\nmutation LoginAdmin($username: String!, $password: String!){\r\n    adminLogin(username: $username, password: $password){\r\n      status\r\n      success\r\n      message\r\n      data{\r\n        username\r\n        password\r\n      }\r\n      accessToken\r\n    }\r\n  }\r\n  `","import { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Button, Checkbox, Form, Input, message } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { LOGIN_ADMIN } from \"../../graphql/mutations/loginAdmin.graphql\";\r\nimport { getAdminByName } from \"../../graphql/schema/admin.graphql\";\r\nimport { useAuthContext } from \"../../modules/context/AuthContext\";\r\nimport JWTManager from \"../../modules/utils/jwt\";\r\nimport \"../../sass/Admin/AdminLoginForm.scss\";\r\n\r\nfunction AdminLoginForm() {\r\n  \r\n  const navigate = useNavigate();\r\n  const {setIsAuthenticated, setIsAdmin, isAdmin, isAuthenticated} = useAuthContext() \r\n  const [adminLogin, {data, loading, error}] = useMutation(LOGIN_ADMIN);\r\n  const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    if(isAdmin) {\r\n      navigate('/dashboard')\r\n    }\r\n  }, [isAdmin, navigate])\r\n  \r\n  const onFinish = async (values: any) => {\r\n    const response = await adminLogin({\r\n      variables : {username: values.username, password: values.password}\r\n    })\r\n\r\n    if (response.data?.adminLogin.success) {\r\n      JWTManager.setToken(response.data.adminLogin.accessToken as string)\r\n      setIsAuthenticated(true)\r\n      setIsAdmin(true)\r\n      navigate('/dashboard')\r\n    } else {\r\n      if (response.data?.adminLogin.message) setErrorMessage(response.data.adminLogin.message)\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n    <Form\r\n      name=\"basic\"\r\n      labelCol={{ span: 8 }}\r\n      wrapperCol={{ span: 16 }}\r\n      initialValues={{ remember: true }}\r\n      onFinish={onFinish}\r\n      autoComplete=\"off\"\r\n      style={{\r\n        height: \"20%\",\r\n        width: \"40%\",\r\n        position: \"absolute\",\r\n        top: \"20%\",\r\n        left: \"25%\",\r\n      }}\r\n    >\r\n      <Form.Item name=\"logo\">\r\n        <img\r\n          src=\"https://senshop.tech/static/media/logo.bc588d992055212e8997a878ac242940.svg\"\r\n          alt=\"logo\"\r\n          className=\"admin_logo\"\r\n          style={{ width: \"80%\", position: \"relative\", left: \"50%\" }}\r\n        />\r\n      </Form.Item>\r\n      {errorMessage && <p style={{color:\"red\", textAlign: \"center\", fontSize:\"20px\"}}>{errorMessage}</p>}\r\n      <Form.Item\r\n        label=\"Username\"\r\n        name=\"username\"\r\n        rules={[{ required: true, message: \"Username không được để trống!\" }]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Password\"\r\n        name=\"password\"\r\n        rules={[{ required: true, message: \"Password không được để trống!\" }]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"remember\"\r\n        valuePropName=\"checked\"\r\n        wrapperCol={{ offset: 8, span: 16 }}\r\n      >\r\n        <Checkbox>Remember me</Checkbox>\r\n      </Form.Item>\r\n\r\n      <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nexport default AdminLoginForm;\r\n"],"names":["LOGIN_ADMIN","gql","navigate","useNavigate","useAuthContext","setIsAuthenticated","setIsAdmin","isAdmin","isAuthenticated","useMutation","adminLogin","data","loading","error","useState","errorMessage","setErrorMessage","useEffect","onFinish","values","variables","username","password","response","success","JWTManager","accessToken","message","name","labelCol","span","wrapperCol","initialValues","remember","autoComplete","style","height","width","position","top","left","src","alt","className","color","textAlign","fontSize","label","rules","required","valuePropName","offset","type","htmlType"],"sourceRoot":""}